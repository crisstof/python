*****************************************************************************************************************************************************************
			Hiérarchie de fichiers modulaires Makefile           (Langages C/C++)									*
*****************************************************************************************************************************************************************

-----------------------------------------------------------------
Nous allons travailler et former cette exemples sur la base	|
d'un module Phidget 1046_0 avec 4 sondes de température PT1000	|
PhidgetBridge 7-input						|
Serial : 568987   version :102					|
https://www.phidgets.com/?tier=3&catid=98&pcid=78&prodid=1027	|
https://www.phidgets.com/docs/Phidgets_Drivers			|
Phidgets Drivers - Phidgets Support				|
								|
-----------------------------------------------------------------

Sous windows
gcc example.c -o example -lphidget22
.\example.exe

Sous Linux
apt-get install gcc
gcc example.c -o example -lphidget22
./example  //execute


***************************************************************************************************************************
************************MAKEFILE*******************************************************************************************

Make est un logiciel qui construit automatiquement des fichiers exécutables ou bibliothèques à partir de code source.
     Il utilise des fichiers appelés makefile qui spécifient la constructions des fichiers cibles à l'aide d'une syntaxe spécifique.
     A la différence d'un script shell, make exécute les commandes seulement si elles sont nécessaire
     Le but est d'arriver à un résultat (logiciel compilé ou installé, documentation créée ...) sans refaire toutes les étapes.
     mots clés: install, clean ...

Il faut avoir une structure et hiérarchie de répertoires et fichiers
tout est dans src (dossier source)
nous avons fonctionsCommunication{h,c} et fonctionsSocke{c;h}
puis un dossier test où nous avons emetteur1.c recepteur1.c emetteur2.c recepteur2.c Makefile

remarque
!!Attention les commandes commencent par une tabulation!!  sinon missing separator

***************************************************************************************************************************
--------------------------------------------------------------------------------------
Faire un Makefile
--------------------------------------------------------------------------------------
# author: cccccccccccc
# created: 09 Feb 2022
# updated: 09 Feb 2022

FUNC_DIR=..
FUNC_C=$(FUNC_DIR)/fonctionsCommunication.c $(FUNC_DIR)/fonctionsSocket.c
FUNC_O=$(FUNC_C:.c=.o)

CFLAGS=-Wall -O2 -I$(FUNC_DIR)
LDFLAGS=

TARGETS=emetteur1 recepteur1 emetteur2 recepteur2

all: $(TARGETS)

emetteur1: $(FUNC_O)
recepteur1: $(FUNC_O)
emetteur2: $(FUNC_O)
recepteur2: $(FUNC_O)

clean:
	rm -f *.o
	rm -f $(TARGETS)
	rm -f $(FUNC_O)
-----------------------------------------------------------------------------------
Un autre makefile
---------------------------------
TARGETS = Bridge-simple

SOURCES = Bridge-simple.c
OBJECTS = $(SOURCES:.c=.o)

INCLUDES = -I.
LIBS     = -lphidget21 -lm
CFLAGS   = -O2 -Wall
LDFLAGS  = 

BINDIR   = /usr/local/bin

DEPEND   = $(SOURCES:.c=.d)

RM       = rm -f
CP       = cp -p                                                                                                              

all: $(TARGETS)

$(TARGETS): $(OBJECTS)
	@echo "Linking $@"
	$(CC) $(OBJECTS) $(LDFLAGS) $(LIBS) -o $@

%.o: %.c
	@echo "Compiling $<"
	$(CC) -c $(CFLAGS) $(INCLUDES) -o $@ $<


ifneq ($(MAKECMDGOALS), clean)
-include $(DEPEND)
endif

%.d: %.c
	@echo "Generating dependencies $@ from $<"
	$(CC) -M ${CFLAGS} $< >$@


.PHONY: clean
clean:
	$(RM) $(OBJECTS) $(TARGETS) $(DEPEND)

.PHONY: install
install: $(TARGETS)
	$(CP) $(TARGETS) $(BINDIR)

-------------------------------------------------------------------------------------------
Makefile et mots clés
-------------------------------------------------------------------------------------------
hello.c				hello.h				main.c
#include<stdio.h>		#ifndef H_GL_HELLO		#include <stdio.h>
#include<stdlib.h>		#define H_GL_HELLO		#include <stdlib.h>
void Hello(void)		void Hello(void);		#include "hello.h"
{ printf("Hello world\n");}	#endif /*idndef H_GL_HELLO*/	int main(void)
								{Hello();
								 return EXIT_SUCCESS;}
gcc main.c hello.c hello.h -o monexec_hello
simple makefile.mak => make -f makefile.mak
hello: main.c
	gcc -Wall -o hello main.c hello.h hello.c
!!Attention les commandes commencent par une tabulation!!  sinon missing separator
-------------------------------------------------------------------------------------------
le makefile est constitué de plusieurs règles 
cible: dependance
     commandes

makefile minimal du projet hello
---------------------------------
all: hello

hello: hello.o main.o                   #1 dépendance si .o est plus récent sinon on reconstruit le hello
    gcc -o hello hello.o main.o

hello.o: hello.c
    gcc -o hello.o -c hello.c -W -Wall -ansi -pedantic

main.o: main.c hello.h
    gcc -o main.o -c main.c -W -Wall -ansi -pedantic

clean: 
   rm -rf *.o

mrproper: clean
  rm -rf hello
---------------------------------------------------------------------------------------------------------------
all: première du fichier regroupe l'ensemble des exécutables à produire
clean: supprime tous les fichiers intermédiaire
mrproper:supprime tout ce qui peut être regénéré et permet une reconstruction complète du projet
---------------------------------------------------------------------------------------------------------------
variable personnalisées
------------------------
évolution plus besoin de changer l'ensemble des règles si le compilateur change seule la variable est à modifier. 
NOM=VALEUR  via $(NOM)
CC compilateur C, CXX compilateur C++
CFLAGS options de compilation ou CXXFLAGS en C++
LDFLAGS regroupe les options de l'édition de liens.
EXEC contenant le nom des exécutables à générer
------------------------------------------------------------------------------
CC=gcc
CFLAGS=-W -Wall -ansi -pedantic
LDFLAGS=
EXEC=hello

all: $(EXEC)

hello: hello.o main.o
    $(CC) -o hello hello.o main.o $(LDFLAGS)

hello.o: hello.c
    $(CC) -o hello.o -c hello.c $(CFLAGS)

main.o: main.c hello.h
    $(CC) -o main.o -c main.c $(CFLAGS)

clean:
    rm -rf *.o

mrproper: clean
    rm -rf $(EXEC)
---------------------------------------------------------------------------------
les variables internes
*@ nom de la cible 
$< nom de la première dépendance 
*^ liste des dépendances 
$? liste des dépendances plus récentes que la cible 
$* le nom du fichier sans suffixe.
---------------------------------------------------------------------------------
CC=gcc
CFLAGS=-W -Wall -ansi -pedantic
LDFLAGS=
EXEC=hello

all: $(EXEC)

hello: hello.o main.o
    $(CC) -o $@ $^ $(LDFLAGS)

hello.o: hello.c
    $(CC) -o $@ -c $< $(CFLAGS)

main.o: main.c hello.h
    $(CC) -o $@ -c $< $(CFLAGS)

clean:
    rm -rf *.o

mrproper: clean
    rm -rf $(EXEC)
--------------------------------------------------------------------------------
les règles d'inférence qui permet de créer des règles génériques
comme construire un .o à partir d'un .c qui se verront appelées par défaut
%.o: %.c           //plus ancien .c.o:
   commandes
---------------------------------------------------------
CC=gcc
CFLAGS=-W -Wall -ansi -pedantic
LDFLAGS=
EXEC=hello

all: $(EXEC)

hello: hello.o main.o
    $(CC) -o $@ $^ $(LDFLAGS)

main.o: hello.h                 on ajoute cette ligne pour préciser le séparément

%.o: %.c                        main.o n'est plus reconstruit si hello.h est modifié on peut le faire séparément.
    $(CC) -o $@ -c $< $(CFLAGS)

.PHONY:clean mrporper

clean:
    rm -rf *.o

mrproper: clean
    rm -rf $(EXEC)
-------------------------------------------------------------
.PHONY
Dans l'exemple présent, clean est la cible d'une règle ne présentant aucune dépendance. 
Supposons que clean soit également le nom d'un fichier présent dans le répertoire courant, 
il serait alors forcément plus récent que ses dépendances et la règle ne serait alors jamais exécutée.
Pour pallier ce problème, il existe une cible particulière nommée 
.PHONY dont les dépendances seront systématiquement reconstruites.
-------------------------------------------------------------
Plutôt que d'énumérer la liste des fichiers objet dans les dépendances de la règle de construction de notre exécutable, il est possible de la générer automatiquement à partir de la liste des fichiers sources. Pour cela nous rajoutons deux variables au Makefile :

SRC qui contient la liste des fichiers sources du projet.
OBJ pour la liste des fichiers objet.
La variable OBJ est remplie à partir de SRC de la manière suivante :
OBJ= $(SRC:.c=.o)
Pour chaque fichier .c contenu dans SRC nous ajoutons à OBJ un fichier de même nom, mais portant l'extension .o.
Nous obtenons alors :
CC=gcc
CFLAGS=-W -Wall -ansi -pedantic
LDFLAGS=
EXEC=hello
SRC= hello.c main.c    #SRC= $(wildcard *.c)     
OBJ= $(SRC:.c=.o)

all: $(EXEC)

hello: $(OBJ)
    $(CC) -o $@ $^ $(LDFLAGS)

main.o: hello.h

%.o: %.c
    $(CC) -o $@ -c $< $(CFLAGS)

.PHONY: clean mrproper

clean:
    rm -rf *.o

mrproper: clean
    rm -rf $(EXEC)
---------------------------------------------------------------
Construction de la liste des fichiers sources
il peut être utile de gérer la liste des fichiers sources de manière automatique 
(attention toutefois à la gestion des dépendances vis-à-vis des fichiers d'entête).
Pour ce faire nous allons faire remplir la variable SRC avec les différents fichiers .c du répertoire.
La première idée qui vient généralement pour réaliser cette tâche est l'utilisation du joker *.c,
 malheureusement il n'est pas possible d'utiliser ce joker directement dans la définition d'une variable. 
Nous devons utiliser la commande wildcard qui permet l'utilisation des caractères joker.
----------------------------------------------------------------
Commande silencieuse
Lorsque le nombre de règles d'un Makefile augmente, il devient très rapidement fastidieux de trouver 
les messages d'erreur affichés au milieu des lignes de commandes.
Les Makefiles permettent de désactiver l'écho des lignes de commandes 
en rajoutant le caractère @ devant la ligne de commande, notre Makefile devient alors :
@rm -rf $(EXEC)
----------------------------------------------------------------
Faire des conditions
qui permettent d'exécuter conditionnellement une partie du Makefile en fonction de l'existence d'une 
variable, de sa valeur.
 par exemple, que nous souhaitions compiler notre projet tantôt en mode debug, tantôt en mode release sans avoir à modifier plusieurs lignes du Makefile pour passer d'un mode à l'autre. Il suffit de créer une variable DEBUG et tester sa valeur pour changer de mode :
DEBUG=yes
CC=gcc
ifeq ($(DEBUG),yes)
    CFLAGS=-W -Wall -ansi -pedantic -g
    LDFLAGS=
else
    CFLAGS=-W -Wall -ansi -pedantic
    LDFLAGS=
endif
EXEC=hello
SRC= $(wildcard *.c)
OBJ= $(SRC:.c=.o)

all: $(EXEC)
ifeq ($(DEBUG),yes)
    @echo "Génération en mode debug"
else
    @echo "Génération en mode release"
endif

hello: $(OBJ)
    @$(CC) -o $@ $^ $(LDFLAGS)

main.o: hello.h

%.o: %.c
    @$(CC) -o $@ -c $< $(CFLAGS)

.PHONY: clean mrproper

clean:
    @rm -rf *.o

mrproper: clean
    @rm -rf $(EXEC)
----------------------------------------------------------------
Sous makefile
Il arrive parfois que l'on souhaite créer plusieurs Makefiles correspondant à des parties distinctes d'un projet (par exemple : client/serveur, bibliothèques de fonctions, sources réparties dans plusieurs répertoires, etc.).
Toutefois il est souhaitable que ces Makefiles soient appelés par un unique Makefile 'maître' et que les options soient identiques d'un Makefile à l'autre.
Il est ainsi possible d'appeler un Makefile depuis un autre Makefile grâce à la variable $(MAKE) et de fournir à ce second Makefile des variables définies dans le premier en exportant celles-ci via l'instruction export, avant d'invoquer le second Makefile.
------------------------------------------------------------------------------
makefile maitre
export CC=gcc
export CFLAGS=-W -Wall -ansi -pedantic
export LDFLAGS=
HELLO_DIR=hello
EXEC=$(HELLO_DIR)/hello

all: $(EXEC)
 
$(EXEC):
    @(cd $(HELLO_DIR) && $(MAKE))

.PHONY: clean mrproper $(EXEC)

clean:
    @(cd $(HELLO_DIR) && $(MAKE) $@)

mrproper: clean
    @(cd $(HELLO_DIR) && $(MAKE) $@)
---------------------------------------------------------------------------------
makefile 
EXEC=hello
SRC= $(wildcard *.c)
OBJ= $(SRC:.c=.o)

all: $(EXEC)

hello: $(OBJ)
    @$(CC) -o $@ $^ $(LDFLAGS)

%.o: %.c
    @$(CC) -o $@ -c $< $(CFLAGS)

.PHONY: clean mrproper

clean:
    @rm -rf *.o

mrproper: clean
    @rm -rf $(EXEC)
------------------------------------------------------------------------------------





















































































