*************************************************************************************************
    tkinter Python										*
*************************************************************************************************
"""
en graphique tout est widget

"""

import tkinter
#from tkinter import *

mainapp = tkinter.Tk()
mainapp.title(Mon premier programme")
#mainapp.minsize(640, 480)
#mainapp.maxsize(1280, 720)
#mainapp.geometry("800*600")
#mainapp.resizable(width=False, haight=True)#empêche le redimensionnement


mainapp.mainloop()  #affiche la fenêtre en continue


*************************************************************************************************
    Centrer la fenêtre										*
*************************************************************************************************
import tkinter

mainapp = tkinter.Tk()
mainapp.title(Mon premier programme")
screen_x = int(mainapp.winfo_screenwidth())
screen_y = int(mainapp.winfo_screenheight())
windows_x = 800
windows_y = 600

posX = (screen_x //2 ) - (windows_x //2)
posY = (screen_y //2 ) - (windows_y //2)

geo = "{}*{}+{}+{}".format(windows_x, windows_y, posX, posY)
mainapp.geometry(geo)
mainapp.mainloop()

*************************************************************************************************
    WIDGET									*
*************************************************************************************************
import tkinter

app = tkinter.Tk()
mainapp.title(Mon premier programme")

label = tkinter.Label(app, text="Bienvenue à tous!")
#ou  print(label.cget("text"))

label = tkinter.Message(app, text="Bienvenue à tous!")

name = tkinter.Entry(app, width=45, show="*")

button_quit = tkinter.Button(app, text="ok", command=hello)

label.pack()

mainapp.mainloop()

##Widget Avancés##
import tkinter

app = tkinter.Tk()

checkWidget = tkinter.Checkbutton(app, text="Publier ?", onvalue=5)
checkWidget.pack()

radioWidget = tkinter.RadioButton(app, text="chat", value=1)
radioWidget.pack()

mainapp.mainloop()

##Fenetre modale#
import tkinter
from tkinter import messagebox
"""
showerror
showinfo
showwarning
askquestion askokcancel, askyesno  askretrycancel
"""
def modal_windows():
	msgBox.askquestion("Sondage", "un problème!")

app = tkinter.Tk()
btn = tkinter.Button(app, text="Déclenche une erreur", command=modal_windows)
checkWidget.pack()
btn.pack()
mainapp.mainloop()

##Positionner un widget avec le widget de cadre
mainframe = tkinter.Frame(app, width=300,  height=200, borderwith=1)
mainfram.pack()



*************************************************************************************************
    Variables contrôle									*
*************************************************************************************************
import tkinter
"""
StringVar()	: chaine de caractères [str]
IntVar()	: nombre entier [int]
DoubleVar()	: nombre flottant [float]
BooleanVar()	: booléen [bool]

mode:
r : A chaque fois la variable va être lu 
w : Appel l'observatoir quand la variable est modifiée
u : quand on supprime la variable

#on modifie le label en direct
"""
#Observateur
def uptdate_label(*args):
   var_label.set(var_entry.get())

#Création et paramétrage de la fenêtre
app = tkinter.Tk()
app.geometry("400*300")
app.title("Variables tkinter")
#Widgets...
var_entry = tkinter.StringVar()
var_entry.trace("w",uptdate_label) #uptdate_label fonction callback 
entry = tkinter.Entry(app, textvariable=var_entry)
var_label = tkinter.StringVar()
label = tkinter.Label(app, textvariable=var_label)
var_label.set("Le label...")

entry.pack()
label.pack()

#boucle principale
app.mainloop()
******************************************************************************************
Nous avons la possibilité d'utiliser d'autres bibliothèques graphiques
wxPython, pyQT, pyGTK, également les bibliothèques de widgets Java etles MFC de Windows.
-----------------------------
Premier pas avec tkinter
-----------------------------
from tkinter import *
fen1 = Tk() #class du module Tk, crée une instance
tex1 = Label(fen1, text='Bonjour !', fg='red')
tex1.pack() #pack() active la méthode pack() réduite la taille fenêtre maitre pour juste assez pour la fenêtre esclave.
bou1 = Button((fen1, text='Quitter', command= fen.destroy)
bou1.pack()#adapte la taille
fen1.mainloop()
***************************************************************
trace figure cible / rond
***************************************************************
from tkinter import *
def cercle(x, y, r, coul ='black'):
"tracé d'un cercle de centre (x,y) et de rayon r"
can.create_oval(x-r, y-r, x+r, y+r, outline=coul)
def figure_1():
"dessiner une cible"
# Effacer d'abord tout dessin préexistant :
can.delete(ALL)
# tracer les deux lignes (vert. Et horiz.) :
can.create_line(100, 0, 100, 200, fill ='blue')
can.create_line(0, 100, 200, 100, fill ='blue')
# tracer plusieurs cercles concentriques :
rayon = 15
while rayon < 100:
cercle(100, 100, rayon)
rayon += 15
def figure_2():
"dessiner un visage simplifié"
# Effacer d'abord tout dessin préexistant :
can.delete(ALL)
# Les caractéristiques de chaque cercle sont
# placées dans une liste de listes :
cc =[[100, 100, 80, 'red'],
# visage
[70, 70, 15, 'blue'],
# yeux
[130, 70, 15, 'blue'],
[70, 70, 5, 'black'],
[130, 70, 5, 'black'],
[44, 115, 20, 'red'],
# joues
[156, 115, 20, 'red'],
[100, 95, 15, 'purple'],
# nez
[100, 145, 30, 'purple']] # bouche
# on trace tous les cercles à l'aide d'une boucle :
i =0
while i < len(cc):
# parcours de la liste
el = cc[i]
# chaque élément est lui-même une liste
cercle(el[0], el[1], el[2], el[3])
i += 1
##### Programme principal : ############
fen = Tk()
can = Canvas(fen, width =200, height =200, bg ='ivory')
can.pack(side =TOP, padx =5, pady =5)
b1 = Button(fen, text ='dessin 1', command =figure_1)
b1.pack(side =LEFT, padx =3, pady =3)
b2 = Button(fen, text ='dessin 2', command =figure_2)
b2.pack(side =RIGHT, padx =3, pady =3)
fen.mainloop()
*****************************
Programmation par évènements
*****************************
# Détection et positionnement d'un clic de souris dans une fenêtre :
from tkinter import *
def pointeur(event):
chaine.configure(text = "Clic détecté en X =" + str(event.x) +\
", Y =" + str(event.y))
fen = Tk()
cadre = Frame(fen, width =200, height =150, bg="light yellow")
cadre.bind("<Button-1>", pointeur) #associer un évènement/ transmettre l'expression que l'utilisateur y aura encodée
cadre.pack()
chaine = Label(fen)
chaine.pack()
fen.mainloop()











































