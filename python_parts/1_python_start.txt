*************************************************************************************
     Start Python												*
*************************************************************************************
--------------------python hello_world.py-------------------------------------------
Encodage en début de fichier par défaut python3:
#coding:utf-8
print("hello world \n let's go") #affiche à l'écran
nom = input("Entrez votre nom:")
print("votre nom est: ", nom)
------------------------------------------------------------------------------------
version
python --version   #3.10   (option -m le module)
pip    --version   #22.0.2
pip install --upgrade pip   #mise à jour de pip
pip list  #module installé

pour mettre à jour tout les modules pip
redirigez tout les noms de modules vers un fihcier texte
pip freeze  > pip_modules.txt
pip insall -r pip_modules.txt --upgrade





----------------------------------------------------------------------------------
Structures:
----------
(if)
if a > 5:
    a=a+1
elif a == 5:
     a=a+100
else:
    a=a-1;

(while)
nb = 7
i = 0
while i<10:
   print(i+1, "*", nb, "=", (i+1) * nb)
   i += 1

(for)
for element in sequence:  #element variable créée par for prend la valeur de la séquence parcourue
chaine = "Bonjour"
for lettre in chaine:
	if lettre in "AEIOUYaeiouy":
		print(lettre)
	else:
		print("*")

le mot break interrompre la boucle.
       continu continuer une boucle repartant à la ligne.
       
----------------------------------------------------------------------------------
Types de fonctions:
------------------
int (integer)
a=15


float
a=14.5
a=3.25e7

au 9 ième terme python passe à la notation scientifique exposant.
au 15 ième terme dépassement sans message d'erreur noté inf
le float manipule des nombres entre 10(-308) et 10(308) avec une précision de 12 chiffres significatifs.
ecodés sur 8 octets (64 bits) en mémoire machine: une partie 12 chiffres significatifs, et une autre
à l'ordre de grandeur (exposant de 10)

str (chaîne de caractères)
a= 'bonjour'


bool
a=True
a=not(a)


list 
jour = ["lundi", "mardi", "mercredi", 1800, 20.357]

complex
a = 2+3j
b = 1 + 1j

binaire
a=0b10110
b=0o12 #octal
c=0x12 #hexa



----------------------------------------------------------------------------------
Fonctions:
---------
la signature d'une fonction en python et son nom car on ne précise pas le type en Python.
def nom_de_la_fonction(param1, param2, paramN):  #def define
def carre(val):
	return val * val

Des fonctions limitées à une seule instruction ainsi qu'un def serait 
plus long et moins pratique, nous avons:
les fonctions lambda:  lambda arg1, arg2, ...: instruction de retour
appel_maFonction = lambda x: x * x


---------
Fonction lambda: une fonction qui fait toujours la 
même chose donc pas besoin de créer une fonction:
prixTTC = lambda prixHT:prixHT + (prixHT * 20/100)
print(prixTTC(24))


Modularité 
on crée un module avec la fonction calcul ...
mais avant de l'intégrer à notre programme principal,
nous pouvons le tester seul avec à la fin:
if __name__ == "__main__":
   calculer()
Ainsi on peut l'exécuter à partir de lui même!!


*********************************************************************************
     Portée des variables							*
*********************************************************************************

name = "toto"

def mon_nom()
    print(name)  #toto
    name="titi"
    print(name)  #titi

print(name) #toto
mon_nom()
print(name)#toto

#Pour que la modification reste
   #faire un return de la fonction
   #passer en paramètre la valeur


*********************************************************************************
     Programmation Objet Python							*
*********************************************************************************
Classe			: plan et conception (class Humain:)
Objet			:instance de classe  (Christophe)

Attribut		: variable de classe (prenom, age, taille)
Propriété		: manière de manipuler les attributs
               		 (lecture seule, accès non autorisé en dehors de la classe...)

Méthode			: fonction d'une classe (manger, marcher, parler, dormir)
Méthode de classe	:fonction d'une classe à la création de l'instance
Méthode statique	:fonction d'une classe, mais indépendante de celle-ci

Héritage		: classe fille qui hérite d'une classe Mère



class Humain:

	#attribut de classe lié à la classe et pas à l'objet
	humains_crees = 0
	habitation = "chez_moi"
	
	def __init__(self, c_prenom="toto"):
		print("Création d'un humain",self)
		self.prenom = c_prenom
		Humains.humains_crees += 1

	#self pour méthode standard méthode d'instance ou d'objet
	def parler(self, message)
	print("{} a dit: {}" .format(self.nom, message))
	
	#cls pour classe pour méthode de classe
	def changer_habitation(cls, nouvelle_habitation):
		Humain.habitation = nouvelle_habitation
	changer_hab = classmethod(changer_habitation)


	#méthode static indépendante on ne travail pas sur la classe
	def definition():
		print("Bonjour");
	defin = staticmethode(definition)
	

h1 = Humain()
print("Prénom de h1 -> {}".format(h1.prenom))

Humain.changer_hab("forêt")
Humain.defin()

h2 = Humain()

---------------
Encapsulation
---------------	
encapsule notation (underscore): self._age = age
#nous avons encapsuler l'age
def _getage(self):
	try:
	   return self._age ou print("aucune recupération")
	except AttributeError:
	   print(l'age n'existe pas vous l'avez effacé")

def _setage(self, nouvelage):
	if nouvelage < 0:
		self._age=0
	else:
		self._age = nouvelage

def _delage(self):
	del self._age


#property (<getter>, <setter>, <deleter>, <helper>)
age = property(_getage, _setage)


main: 
del h1.age

------------
Doc-String
------------
class Voiture:
	""" Doc string
        Cette classe représente une voiture"""
	....
on appelle help(Voiture) #affiche la doc


-----------------------------
Héritage ou multi-héritage
-----------------------------
classe Voiture(Vehicule):
	def __init__(self, nom_voiture, essence, puissance):
		Vehicule.__init__(self, nom_voiture, essance)
		self.puissance = puissance







































